generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  phone      Int
  password   String
  username   String    @unique
  isVerified Boolean   @default(false)
  image      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  addresses  Address[]
  orders     Order[]

  @@map("users")
}

model Address {
  id        Int     @id @default(autoincrement())
  label     String
  detail    String
  latitude  Decimal
  longitude Decimal
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  cityId    Int
  city      City    @relation(fields: [cityId], references: [id])

  @@map("addresses")
}

model City {
  id           Int           @id @default(autoincrement())
  name         String
  postalCode   Int
  provinceId   Int
  province     Province      @relation(fields: [provinceId], references: [id])
  addresses    Address[]
  storeBranchs StoreBranch[]

  @@map("cities")
}

model Province {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]

  @@map("provinces")
}

model StoreBranch {
  id             Int             @id @default(autoincrement())
  name           String
  latitude       Decimal
  longitude      Decimal
  address        String
  cityId         Int
  city           City            @relation(fields: [cityId], references: [id])
  stocks         Stock[]
  stockMutations StockMutation[]
  journals       Journal[]
  admins         Admin[]

  @@map("store_branches")
}

model Admin {
  id           Int         @id @default(autoincrement())
  username     String      @unique
  email        String      @unique
  password     String
  image        String
  isSuperAdmin Boolean     @default(false)
  branchId     Int         @unique
  storeBranch  StoreBranch @relation(fields: [branchId], references: [id])

  @@map("admins")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  image       String
  price       Decimal
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  stocks      Stock[]
  orderItems  OrderItem[]

  @@map("products")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("categories")
}

model Stock {
  id             Int             @id @default(autoincrement())
  amount         Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  productId      Int
  product        Product         @relation(fields: [productId], references: [id])
  branchId       Int
  storeBranch    StoreBranch     @relation(fields: [branchId], references: [id])
  stockMutations StockMutation[]

  @@map("stocks")
}

model Order {
  id              Int         @id @default(autoincrement())
  orderId         String      @unique
  branchId        Int?
  amount          Int
  message         String?
  snapToken       String?
  snapRedirectUrl String?
  paymentProof    String?
  address         String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  statusId        Int
  status          Status      @relation(fields: [statusId], references: [id])
  orderItems      OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  productName String
  price       Decimal
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderId     String
  order       Order    @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])

  @@index([productId], map: "productId")
  @@index([orderId], map: "orderId")
  @@map("order_items")
}

model Status {
  id     Int     @id @default(autoincrement())
  title  String
  orders Order[]

  @@map("statuses")
}

model StockMutation {
  id                  Int         @id @default(autoincrement())
  orderId             String
  productId           Int
  quantity            Int
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  stockId             Int
  stock               Stock       @relation(fields: [stockId], references: [id])
  destinationBranchId Int
  storeBranch         StoreBranch @relation(fields: [destinationBranchId], references: [id])

  @@map("stock_mutations")
}

model Journal {
  id          Int         @id @default(autoincrement())
  branchId    Int
  title       String
  reason      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  storeBranch StoreBranch @relation(fields: [branchId], references: [id])

  @@map("journals")
}
